스트림
- 데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 묘듈로써, 스트림의 양 끝에는 프로그램과 장치를 연결시켜준다. 스트림 종류로는 입력 스트림과 출력 스트림이 있다.

입출력 방식 2가지
1. 스트림 입출력 방식 - 스트림 버퍼를 이용한 입출력 방식으로, 입력된 키는 버퍼에 저장하고 출력되는 데이터는 일차적으로 스트림 버퍼에 저장한다.
2. 저 수준 입출력 방식 - 키가 입력되는 즉시 프로그램에게 키 값을 전달하며, 프로그램이 출력하는 즉시 출력 장치에 출력된다.

입출력 라이브러리의 약점 
- 문자를 한 바이트의 char로 처리하기 때문에 cin으로 한글을 문자 단위로는 읽을 수 없다.

C++ 표준 입출력 스트림 객체
cin - istream 타입의 스트림 객체로서 키보드 장치와 연결한다.
cout - ostream 타입의 스트림 객체로서 스크린 장치와 연결한다.
cerr - ostream 타입의 스트림 객체로서 스크린 장치와 연결하며, 스트림 내부 버퍼를 거치지 않고 출력한다.
clog - ostream 타입의 스트림 객체로서 스크린 장치와 연결하며, 스트림 내부 버퍼를 거치고 출력한다.

get()이 읽는 도중 <Enter>키 \n 을 만날 때 읽기를 중하고 리턴시키며, <Enter> 키는 스트림 버퍼에 남아 있다. 이를 해결하기 위해 cin.get() or cin.ignore(1);를 통해 문자 1개를 스트림에서 읽어 버려야 한다.

cin.getline() 함수를 통해 한 줄 읽기가 가능하다.

포맷 입출력
- 입출력 시 포맷 지정이 가능하며, C 언어의 printf()와 유사하다.

포맷 입출력 방법 3가지,
1. 포맷 플러그 - 입출력 스트림에서 입출력 형식을 지정하기 위한 플래그이다.
2. 포맷 함수 - 
3. 조작자 - 조작자는 함수이고, 매개 변수 없는 조작자와 매개 변수를 가진 조작자로 구분되며, 항상 << 나 >> 연산자와 함께 사용된다.

매개 변수 없는 조작자
- endl - 스트림 버퍼를 모두 출력하고 다음 줄로 넘어감.
- oct - 정수 필드 8진수 기반으로 출력 
- dec - 정수 필드 10진수 기반으로 출력
- hex - 정수 필드 16진수 기반으로 출력
- left - 왼쪽 맞춤으로 정렬
- right - 오른쪽 맞춤으로 정렬
등등

매개 변수 있는 조작자
- resetioflags(long flags) - flags에 지정된 플래그들 해제
- setbase(int base) - base를 출력할 수의 진수로 지정
- setfill(char cFill) - 필드를 출력하고 남은 공간에 cFill 문자로 채움
- setioflags(long flags) - flags를 스트림 입출력 플래그로 설정
- setprecision(int np) - 출력되는 수의 유효 숫자 자리수를 np개로 설정, 소수점은 별도로 카운트
- setw(int minWidth) - 필드의 최소 너비를 minWidth로 지정

삽입 연산자(<<)
- insertion operator, 삽입자라고도 부르며, ostream 클래스에 중복 작성되어 있으며, 사용자 삽입 연산자를 만들 수 있다. ex) friend ostream& operator << (ostream& stream, Point a); , ostream& operator << (ostream& stream, Point a) {

ostream 클래스 중복 작성 ex)
class ostream : virtual public ios {
	..........
public :
	ostream& operator<< (int n); // 정수를 출력하는 << 연산자 
	ostream& operator<< (char c); // 문자를 출력하는 << 연산자
	ostream& operator<< (const char* s); // 문자열을 출력하는 << 연산자
	..........
};
추출 연산자(>>)
- >> 연산자는 C++의 기본 연산자로, 정수 시프트 연산자이며, istream 클래스에 중복 작성되어 있다

istream 클래스 중복 작성 ex)
class istream  : virtual public ios {
	..........
public :
	istream& operator>> (int& n); // 정수를 입력하는 >> 연산자 
	istream& operator>> (char& c); // 문자를 입력하는 >> 연산자
	istream& operator>> (const char* s); // 문자열을 입력하는 >> 연산자
	..........
};

사용자 정의 조작자 함수 원형 ( 매개 변수 없는 조작자의 경우 )
- istream& manipulatorFunction (istream& ins) // 입력 스트림에 사용되는 조작자 원형
- ostream& manipulatorFunction (ostream& outs) // 출력 스트림에 사용되는 조작자 원형

이번 시간에는  입출력 스트림, 포맷 입출력, 매개 변수 유무 조작자, 삽입 연산자, 추출 연산자, 사용자 정의 조작자 함수에 대해서 배웠다.

C++에서 기본적으로 제공해주는 함수가 아닌 본인이 원하는 함수 즉, 사용자 정의 조작자 함수를 직접 본인이 원하는 대로 만들어, 코드를 효율적으로 작성할 수 있고, 함수를 사용함에 있어서도, 자신이 알고 있는 함수를 쉽게 끌어와 사용할 수 있다는 매우 효과적인 장점이 있다.
따라서, C++에서 기본적으로 제공해주는 함수가 아닌, 사용자 정의 조작자 함수를 직접 만들어 코드를 사용하는 것이 효율적인 코딩을 하는 방법이라고 할 수 있을 것 같고, 나중에 가면, 코드가 매우 복잡해지기 때문에 꼭 필요한 함수라고 생각한다.

※ 프렌드 함수
 - 클래스 외부에 작성된 함수, 멤버가 아니다.
 - friend 키워드로 클래스 내에 선언된 함수로, 클래스의 모든 멤버에 접근 가능하다.
 - 프렌드 함수 개수에는 제한이 없다.

class Rect { // Rect 클래스 선언
	int width, height;
public:
	Rect(int width, int height) { this->width = width; this->height = height; }
	friend bool equals(Rect r, Rect s);  // 외부 함수 equals()를 Rect 클래스에 프렌드로 선언


friend bool RectManager::equals(Rect r, Rect s); // 다른 클래스의 멤버 함수를 프렌드로 선언

friend RectManager; // 다른 클래스 전체를 프렌드로 선언

- 이를 통해 프렌드 함수가 무엇이고, 어떻게 사용하는지에 대해 새롭게 알게 되었다.
다만 파트너의 의견으로는, 캡슐화를 어기는 방법이기 때문에 friend 함수를 지향하진 않는다고 한다.

※ 연산자 중복
 - C++에 본래 있는 연산자만 중복 가능하다.
 - 반드시 클래스와 관계를 가진다.
 - 피연산자의 개수를 바꿀 수는 없다.
 - 연산의 우선 순위 변경 불가하다.
 - 모든 연산자가 중복 가능하지는 않다.

※ 연산자 함수 구현 방법 2가지
 1. 클래스의 멤버 함수로 구현하기  // Color operator+ (Color op2); bool operator== (Color op2);
 2. 외부 함수로 구현하고 클래스에 프렌드 함수로 선언하기  // friend Color operator+ (Color op1, Color op2); friend bool operator== (Color op1, Color op2);

- 이를 통해 본래부터 있던 연산자에 기존에 갖고 있던 의미가 아닌 새로운 의미를 정의할 수 있음을 새롭게 알게 되었다.

※ 전위 연산자일 경우 : // Power& Power::operator++() 
                         Power에 참조 &를 붙여서 Power의 값을 변경할 수 있는 본인 자신이기 때문에, 값이 + 된 값을 출력해준다.

※ 후위 연산자일 경우 : // Power Power::operator++()
                         Power는 Power의 값을 변경할 수 없는 복사본이기 때문에, 값을 출력 후에 값을 + 해준다.

- F9 단축키를 사용하여 그 줄의 중단점을 설정해 중단점까지의 코드를 디버깅한 기록을 확인하여 코드를 수정할 수 있다.
- C 언어에서는 printf 함수를 사용하여 출력하는 반면에, C++ 언어에서는 std:cout 함수를 사용하여 출력한다.
- void main()이 표준이 아니라 int main() 형식이 표준 형식이다.
- #include <stdio.h> 헤더 파일 대신 #include <iostream> 헤더 파일을 사용한다.
- << 연산자 : C++ 기본 산술 시프트 연산자(<<)가 스트림 삽입 연산자로 재정의됨, bool, char, short, int, long, float, double 타입 값 출력
  및 함수 호출도 가능
- 다음 줄로 넘어가기 : '\n' or endl
- 이름 충돌을 방지하기 위해 namespace 키워드를 사용하여 이름 공간을 작성한다.
- std : C++ 표준에서 정의한 이름 공간 중 하나이다.
- using 지시어를 사용하여 std::cout, std::endl 등에서 std::를 생략하고 cout, endl를 사용할 수 있다.
 ex) # include <iostream>
     using namespace std;
- >> 연산자 : C++ 산술 시프트 연산자(>>)가 <iostream> 헤더 파일에 스트림 추출 연산자로 재정의됨.
  연속된 >>연산자를 사용하여 여러 값을 입력할 수 있다.
- C 언어에서는 scanf 함수를 사용한 반면에 C++에서는 cin을 사용하여 값을 입력받는다.
- '\0'로 끝나는 문자배열 : C-스트링 방식이며, '\0\' 공간이 없이 끝나는 배열은 단순 문자 배열이다.
- 문자열을 사용하기 위해선 <cstring> 이나 <string.h> 헤더 파일을 포함시켜야 한다.
- 문자열을 빈 칸 없이 키 입력해야 한다. 빈 칸을 만나면 문자열 입력 종료 ex) 마 이 클 -> 마 까지 출력
- cin.getline()으로 공백이 낀 문자열 입력
  cin.getline(char buf[], int size, char delimitChar)
  ex) char address[100];
      cin.getline(address,100,'\n');  //최대 99개의 문자를 읽어 address 배열에 저장하고, 도중에 <Enter>키를 만나면 입력을 중단한다.



※ 예제 2-5 정리
0. <iostream>, <cstring> 헤더파일 선언, using namespace std 선언.
1. 문자열 password 선언
2. while문을 통해서 cin 값 password를 받는다.
3. if문에서 비교를 해야 하는데 두 문자를 비교해 줄 수 있는 strcmp 라는 함수를 사용하는 것이 둘이 맞다고 생각했다. 
   여기서 strcmp란 두 매개변수를 비교해주는 함수이다. 두 매개변수가 같으면 0을 반환하고 다르면 1을 반환해준다.
   그렇기 때문에 true, false 값을 비교문 값으로 넣으면 반대값이 나오는 것을 확인해서 == 0 을 이용하여 코드를 작성했습니다.
4. strcmp 함수를 사용해서 반환값이 0이면 암호가 일치하기 때문에 break문으로 탈출하며, 틀릴 경우 반복적으로 돌아가기 위해 while 문을
   사용하였다.


- 문제가 있었던 부분 또는 새롭게 알게된 부분 : 간단한 예제 문제임에도 불구하고 strcmp 라는 함수를 기존에 알지 못해 입력받은 값과 암호를 비교하는 코드를 작성하지 못하는 어려움이 있었다.
                                            두 매개변수를 비교할 수 있는 strcmp 함수를 새롭게 알게 됨으로써, 문제를 해결할 수 있는 코드를 작성할 수 있게 되었다.


//예제 2-5 코드 ↓
---------------------------------------------
#include<iostream>
#include<cstring>
using namespace std;

int main() {
	char password[15];
	cout << "암호를 입력하세요>>" << endl;

	while (true) {
		cout << "<암호>";
		cin >> password;

    		// strcmp(password, "C++") == true로 하면 반대 값이 나오니 == 0이 참일 걸 기억할 것.
		if (strcmp(password, "C++") == 0) {
			cout << "접속 완료" << endl;
			break;
		}
		else {
			cout << "암호 땡~~" << endl;
		}
	}
	return 0;
}


---------------------------------------------


※  p.90 실습문제 8번 정리
0. <iostream>, <cstring> 헤더파일 선언, using namespace std 선언.
1. 이름이 가장 긴 사람을 담을 스트링 문자열 longName 선언, 이름을 입력 받을 문자열 name 선언, 가장 이름이 긴 사람의 길이 값을 담을 정수 max 선언 
2. for문을 통해서 name 문자열을 5번 입력받기 위해 5번 루프를 시켜준다.
3. getline() 함수를 통해서 ';'로 name에 입력 받을 각각의 문자열을 구분해주고 5명의 이름을 구분하면서 적는다.
4. 가장 이름이 긴 사람의 길이 값을 담을 정수 max의 초기값은 0이다. if문을 사용해 첫 번째 사람부터 다섯 번째 사람까지 각각의 이름의 길이를 max와 비교하여준다.
   max보다 i번째 사람의 이름 길이가 더 길 경우 max는 그 i번째 사람의 이름 길이 값이 되고, longName에 그 i번째 사람의 이름을 넣어준다.
5. 마지막으로 가장 긴 이름인 longName을 출력해준다.

- 문제가 있었던 부분 또는 새롭게 알게된 부분 : getline() 함수를 5번 반복하기 위해서 for문을 어떻게 사용해야 하는지에 대해서 1차적으로 막혔고, i번째 사람과 이름길이를 어떻게 비교할 것인지에 대해서 2차적으로 막혀 토론을 해보았다. 
		                           이를 해결하기 위해, for문을 5번 돌려주고, 그 for문안에 getline() 함수를 작성하여 문자열을 5번 입력받고, if 문을 사용하여 가장 이름이 긴 사람의 길이 값을 담을 정수 max와 
                                           i번째 사람의 이름의 길이를 비교하기 위해 스트링 길이를 알려주는 strlen 함수를 사용해 주었다. max보다 i번째사람의 이름이 더 길 경우, max에 그 값을 저장하고, 이름이 가장 긴 사람을 담을 문자열 longName에 max 값을 담아주었다.
                                           마지막으로 longName을 출력해주면 코드가 마무리된다. getline() 함수가 아직 익숙하지 않아서 코드를 작성하는 데 어려움이 있었고, 이를 보완하기 위해 많이 사용해보기로 했다.

//p.90 실습문제 8번 코드 ↓
---------------------------------------------
#include<iostream>
#include<cstring>
using namespace std;

int main()
{
    string longName;   //이름이 가장 긴 사람을 담을 문자열
    char name[100]; //이름을 입력 받을 문자열
    int max = 0;  // 가장 이름이 긴 사람의 길이
    cout << "5 명의 이름을 ';'으로 구분하여 입력하세요\n" << ">>";

    for (int i = 0; i < 5; i++)
    {
        cin.getline(name, 100, ';'); // getline() 특성상 지금 상황의 for문 5번을 다 입력받
        cout << i + 1 << " : " << name;
        cout << endl;

        if (max < strlen(name)) //strlen 함수 : 스트링길이
        {
            max = strlen(name);
            longName = name;
        }
        
    }

    cout << "가장 긴 이름은 " << longName << endl;

}
---------------------------------------------
